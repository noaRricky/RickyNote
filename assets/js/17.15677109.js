(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{371:function(_,v,t){"use strict";t.r(v);var a=t(42),s=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"计算机网络面试问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算机网络面试问题"}},[_._v("#")]),_._v(" 计算机网络面试问题")]),_._v(" "),t("h2",{attrs:{id:"osi-应用失败的原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#osi-应用失败的原因"}},[_._v("#")]),_._v(" OSI 应用失败的原因")]),_._v(" "),t("ul",[t("li",[_._v("OSI 的专家缺乏实际经验，他们在王城OSI标准时缺乏商业驱动力")]),_._v(" "),t("li",[_._v("OSI 协议实行起来过分复杂，而却运行效率很低")]),_._v(" "),t("li",[_._v("OSI 制定标准的周期太长，因而是的按 OSI 标注生产的设备无法及时进入市场 (当OSI设计出来的时候，基于TCP/IP的互联网已经抢先在全球范围实行)")]),_._v(" "),t("li",[_._v("OSI 层次划分不太合理，有些功能多个层次重复出现")])]),_._v(" "),t("h2",{attrs:{id:"osi-的体系结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#osi-的体系结构"}},[_._v("#")]),_._v(" OSI 的体系结构")]),_._v(" "),t("ul",[t("li",[_._v("应用层")]),_._v(" "),t("li",[_._v("表示层")]),_._v(" "),t("li",[_._v("会话层")]),_._v(" "),t("li",[_._v("运输层")]),_._v(" "),t("li",[_._v("网络层")]),_._v(" "),t("li",[_._v("数据链路层")]),_._v(" "),t("li",[_._v("物理层")])]),_._v(" "),t("h2",{attrs:{id:"五层协议的体系结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五层协议的体系结果"}},[_._v("#")]),_._v(" 五层协议的体系结果")]),_._v(" "),t("ul",[t("li",[_._v("应用层: 负责在不同"),t("strong",[_._v("应用")]),_._v("之间传递和解析数据")]),_._v(" "),t("li",[_._v("运输层: 负责在不同"),t("strong",[_._v("进程")]),_._v("之间传输和解析数据")]),_._v(" "),t("li",[_._v("网络层: 负责在不同"),t("strong",[_._v("主机")]),_._v("之间传输和解析数据")]),_._v(" "),t("li",[_._v("数据链路层: 主机之间传递数据，总是在"),t("strong",[_._v("一段一段的链路")]),_._v("上发送的")]),_._v(" "),t("li",[_._v("物理层: 发送数据的单位是比特，相对于数据链路层屏蔽掉不同设备之间传输数据的不同")])]),_._v(" "),t("h2",{attrs:{id:"udp的主要特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#udp的主要特点"}},[_._v("#")]),_._v(" UDP的主要特点:")]),_._v(" "),t("ul",[t("li",[_._v("UDP是无连接的；")]),_._v(" "),t("li",[_._v("UDP使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态（这里面有许多- 参数）；")]),_._v(" "),t("li",[_._v("UDP是面向报文的；")]),_._v(" "),t("li",[_._v("UDP没有拥塞控制，因此网络出现拥塞"),t("strong",[_._v("不会使源主机的发送速率降低")]),_._v("（对实时应用很有用，如IP电话，实时视频会议等）；")]),_._v(" "),t("li",[_._v("UDP支持一对一、一对多、多对一和多对多的交互通信；\nUDP的首部开销小，只有8个字节，比TCP的20个字节的首部要短。")]),_._v(" "),t("li",[_._v("小结: 无连接, 传输不可靠, 数据报文段, 传输速率快, 所需资源少, 应用在通信速度快的场景中, 头部8个字节")])]),_._v(" "),t("h2",{attrs:{id:"tcp的主要特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp的主要特点"}},[_._v("#")]),_._v(" TCP的主要特点:")]),_._v(" "),t("ul",[t("li",[_._v("TCP是面向连接的。（就好像打电话一样，通话前需要先拨号建立连接，通话结束后要挂机释放连接）；")]),_._v(" "),t("li",[_._v("每一条TCP连接只能有两个端点，每一条TCP连接只能是点对点的（一对一）；")]),_._v(" "),t("li",[_._v("TCP提供可靠交付的服务。通过TCP连接传送的数据，无差错、不丢失、不重复、并且按序到达；")]),_._v(" "),t("li",[_._v("TCP提供全双工通信。TCP允许通信双方的应用进程在任何时候都能发送数据。TCP连接的两端都设有发送缓存和接收缓存，用来临时存放双方通信的数据；")]),_._v(" "),t("li",[_._v("面向字节流。TCP中的“流”（stream）指的是流入进程或从进程流出的字节序列。“面向字节流”的含义是：虽然应用程序和TCP的交互是一次一个数据块（大小不等），但TCP把应用程序交下来的数据仅仅看成是一连串的无结构的字节流。")]),_._v(" "),t("li",[_._v("小结: 面向连接, 可靠传输(相对), 数据流, 传输速率慢, 所需资源多, 应用在保证数据的可靠性, 头部20-60个字节")]),_._v(" "),t("li",[t("strong",[_._v("问题TCP、UDP协议的区别")])])]),_._v(" "),t("h2",{attrs:{id:"tcp-三次握手和四次挥手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-三次握手和四次挥手"}},[_._v("#")]),_._v(" TCP 三次握手和四次挥手")]),_._v(" "),t("p",[_._v("详细阅读文章: https://blog.csdn.net/qzcsu/article/details/72861891")]),_._v(" "),t("ul",[t("li",[_._v("发送端: SYN -> 接收端")]),_._v(" "),t("li",[_._v("发送端: <- SYN/ACK 接收端，注: 当发送段收到 SYN/ACK 的数据包是证明发送端发送功能和接收端接受功能没有问题")]),_._v(" "),t("li",[_._v("发送端: ACK -> 接收端，注: 当接收端接收到 ACK 报文后，证明接收端能正确发送报文，发送端接收报文没有问题")])]),_._v(" "),t("h3",{attrs:{id:"在三次握手中，为什么tcp客户段还要再发送一次"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在三次握手中，为什么tcp客户段还要再发送一次"}},[_._v("#")]),_._v(" 在三次握手中，为什么TCP客户段还要再发送一次")]),_._v(" "),t("ul",[t("li",[_._v("如果客户端不想服务器发送报文服务器无法确认客户端发送功能是否正确，服务器的发送功能是否正确")]),_._v(" "),t("li",[_._v("在两次握手的前提下，如果第一次SYN报文因为网络延迟，在TCP关闭链接之后到达服务器，服务器又会发送 SYN/ACK 报文建立TCP链接此时，然而这个链接是失效的，所以增加第三次握手时服务器会判断该该 SYN/ACK 请求是否有效，避免产生无效的 TCP 链接")])]),_._v(" "),t("h3",{attrs:{id:"在四次挥手过程中，为什么客户端还要等待-2msl-的时间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在四次挥手过程中，为什么客户端还要等待-2msl-的时间"}},[_._v("#")]),_._v(" 在四次挥手过程中，为什么客户端还要等待 2MSL 的时间")]),_._v(" "),t("ul",[t("li",[_._v("站在服务器的角度来看，当它发送的 FIN/ACK 报文没有收到服务器的相应，会重新发送报文，该2MSL的时间就是用于处理延迟情况的")]),_._v(" "),t("li",[_._v("防止类似于“三次握手”过程中提到的“失效报文导致的错误链接结果”，在该 2MSL 的时间中客户端可以删除所有本链接持续时间内所有的报文从网络中消失")])]),_._v(" "),t("h2",{attrs:{id:"打开一个网页，整个过程会使用哪些协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#打开一个网页，整个过程会使用哪些协议"}},[_._v("#")]),_._v(" 打开一个网页，整个过程会使用哪些协议")]),_._v(" "),t("p",[_._v("详细阅读文章: https://segmentfault.com/a/1190000006879700")]),_._v(" "),t("ul",[t("li",[_._v("过程中依次遇到的协议\n"),t("ul",[t("li",[_._v("DNS\n"),t("ul",[t("li",[_._v("DNS 解析过程: 本地DNS缓存 - 路由器缓存 - 根域名服务器 - com 域名顶级服务器 - baidu 顶级域名服务器 - www 顶级域名服务器")]),_._v(" "),t("li",[_._v("DNS 优化\n"),t("ul",[t("li",[_._v("DNS 缓存，浏览器缓存，系统缓存 /etc/hosts")]),_._v(" "),t("li",[_._v("DNS 分布式优化: DNS 服务器会根据请求的位置，返回离客户端最近的服务器 IP 地址")])])])])]),_._v(" "),t("li",[_._v("HTTP HTTPS: HTTPS 使用 SSL or TLS 对 HTTP 请求进行加密")]),_._v(" "),t("li",[_._v("TCP")]),_._v(" "),t("li",[_._v("IP")]),_._v(" "),t("li",[_._v("TCP")]),_._v(" "),t("li",[_._v("HTTP")])])])]),_._v(" "),t("h2",{attrs:{id:"http长连接、短连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http长连接、短连接"}},[_._v("#")]),_._v(" HTTP长连接、短连接")]),_._v(" "),t("p",[_._v("在 HTTP/1.1 协议中支持: Connection: keep-alive，实际上是 TCP 协议的长连接和短连接")]),_._v(" "),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/gotodsp/p/6366163.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("HTTP长连接、短连接究竟是什么"),t("OutboundLink")],1)]),_._v(" "),t("h3",{attrs:{id:"服务器如何探测客户端的状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务器如何探测客户端的状态"}},[_._v("#")]),_._v(" 服务器如何探测客户端的状态")]),_._v(" "),t("ul",[t("li",[_._v("服务器发送一个探测报文，如果客户端相应保持连接")]),_._v(" "),t("li",[_._v("如果客户端死机、重新启动或者网络不通畅，客服端无法回复，则服务器会连续发送十次探测报文，如果没有一个相应则关闭连接")]),_._v(" "),t("li",[_._v("客户端宕机重启后，收到探测报文，会返回一个复位响应，之后服务器关闭链接")])]),_._v(" "),t("h3",{attrs:{id:"tcp-协议如何保证可靠传输"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-协议如何保证可靠传输"}},[_._v("#")]),_._v(" TCP 协议如何保证可靠传输")]),_._v(" "),t("ul",[t("li",[_._v("应用数据被分割成TCP合适的数据块")]),_._v(" "),t("li",[_._v("TCP将数据块进行编号，接收端对接收到的数据进行排序，发送给应用层")]),_._v(" "),t("li",[_._v("TCP 接收端会丢失重复的数据")]),_._v(" "),t("li",[_._v("校验和")]),_._v(" "),t("li",[_._v("阻塞控制")]),_._v(" "),t("li",[_._v("流量控制")]),_._v(" "),t("li",[_._v("ARQ协议: 发送端会维护一个滑动窗口进行发送，发送窗口的信息后，就停止发送等待接收端的确认信息")]),_._v(" "),t("li",[_._v("超时重传")])]),_._v(" "),t("h3",{attrs:{id:"arq协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arq协议"}},[_._v("#")]),_._v(" ARQ协议")]),_._v(" "),t("p",[_._v("自动重传协议 (Automatic Repeat-reQuest, ARQ) 使用确认和超时两个机制使得在不可靠传输的基础上建立可靠的传输，包括 "),t("strong",[_._v("停止等待ARQ")]),_._v(" 和 "),t("strong",[_._v("连续ARQ协议")])]),_._v(" "),t("h4",{attrs:{id:"停止等待"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#停止等待"}},[_._v("#")]),_._v(" 停止等待")]),_._v(" "),t("p",[_._v("耗时，实现简单")]),_._v(" "),t("h4",{attrs:{id:"连续arq协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#连续arq协议"}},[_._v("#")]),_._v(" 连续ARQ协议")]),_._v(" "),t("ul",[t("li",[_._v("发送端维护一个发送窗口")]),_._v(" "),t("li",[_._v("当发生超时的问题时候，只发送接收号之后的报文")])]),_._v(" "),t("h3",{attrs:{id:"阻塞控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#阻塞控制"}},[_._v("#")]),_._v(" 阻塞控制")]),_._v(" "),t("ul",[t("li",[_._v("慢开始")]),_._v(" "),t("li",[_._v("阻塞避免")]),_._v(" "),t("li",[_._v("快重传")]),_._v(" "),t("li",[_._v("快恢复")])]),_._v(" "),t("h3",{attrs:{id:"cookie-和-session-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cookie-和-session-的区别"}},[_._v("#")]),_._v(" Cookie 和 Session 的区别")]),_._v(" "),t("ul",[t("li",[_._v("Cookie 用来保存用户的"),t("strong",[_._v("信息")]),_._v(" Session 用来保存用户的"),t("strong",[_._v("状态")])])]),_._v(" "),t("h3",{attrs:{id:"http1-0-和-http1-1-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http1-0-和-http1-1-的区别"}},[_._v("#")]),_._v(" HTTP1.0 和 HTTP1.1 的区别")]),_._v(" "),t("ul",[t("li",[_._v("长连接")]),_._v(" "),t("li",[_._v("错误状态吗")]),_._v(" "),t("li",[_._v("缓存处理")]),_._v(" "),t("li",[_._v("带宽优化和网络连接的使用")])]),_._v(" "),t("h3",{attrs:{id:"http-和-https-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-和-https-的区别"}},[_._v("#")]),_._v(" HTTP 和 HTTPS 的区别")]),_._v(" "),t("ul",[t("li",[_._v("HTTP端口在80, HTTPS的端口在443, HTTPS 是运行在 SSL/TLS 之上的协议")]),_._v(" "),t("li",[_._v("HTTPS 对 HTTP 的报文进行非对称加密 并发送给TCP\n"),t("ul",[t("li",[_._v("对称加密: 加密解密使用同一个密码")]),_._v(" "),t("li",[_._v("非对称加密: 存在公钥和私钥，公钥加密私钥解密，私钥加密公钥解密")])])])]),_._v(" "),t("h2",{attrs:{id:"rerference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rerference"}},[_._v("#")]),_._v(" Rerference")]),_._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("图解SSL/TLS协议"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=s.exports}}]);