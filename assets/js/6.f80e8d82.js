(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{350:function(t,a,s){t.exports=s.p+"assets/img/JMM.16ff4fe1.png"},351:function(t,a,s){t.exports=s.p+"assets/img/atomicOpt.a2df3c87.png"},364:function(t,a,s){"use strict";s.r(a);var r=s(42),n=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"java内存模型-一-一个码农的期望"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java内存模型-一-一个码农的期望"}},[t._v("#")]),t._v(" Java内存模型(一) - 一个码农的期望")]),t._v(" "),r("p",[t._v("最近发现自己在产品思维上有所欠缺，并且刚刚读完《java并发编程艺术这本书》，于是决定从程序员的需求角度大概写写自己对JMM的理解，希望对大家有所帮助。")]),t._v(" "),r("h2",{attrs:{id:"背景知识"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#背景知识"}},[t._v("#")]),t._v(" 背景知识")]),t._v(" "),r("p",[t._v("了解一个解决方案首先得明白它处理的问题，通过背景知识，我们可以更好的理解它产生的原因，以及其中所包含的思想")]),t._v(" "),r("p",[t._v("在单个处理器的处理速度的提升已经不在明显的时候，人们便尝试使用多种方法来提高计算机的运算效率，其中包括")]),t._v(" "),r("ul",[r("li",[t._v("引入多级缓存机制，同过减少了读取运算数据、存储运算结果等I/O操作的次数，让计算机运算快速执行，减少了处理器等待时间")]),t._v(" "),r("li",[t._v("使用多核处理器，三个臭皮匠顶过顶过一个诸葛亮")]),t._v(" "),r("li",[t._v("代码乱序优化，重新调整顺序的代码可以使用硬件底层的批处理等技术，加快运算效率")])]),t._v(" "),r("p",[t._v("但同时一个全新概念的引入，往往会伴随着诸多问题等待着这些伟大的先驱者去解决。")]),t._v(" "),r("h3",{attrs:{id:"缓存一致性问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#缓存一致性问题"}},[t._v("#")]),t._v(" 缓存一致性问题")]),t._v(" "),r("p",[r("img",{attrs:{src:s(350),alt:"缓存一致性"}})]),t._v(" "),r("p",[t._v("当多个处理器要使用和修改主内存中同一块区域时，可能会导致不同处理器中的数据不一样，如何将不同CPU寄存器、高速缓存中的数据进行同步，保证数据的一致性，运算的正确性的同时保证处理器的效率是设计着需要考虑的问题。在硬件上，各个处理器都遵循了各自的一致性协议，来解决这些问题")]),t._v(" "),r("h3",{attrs:{id:"指令重排序问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#指令重排序问题"}},[t._v("#")]),t._v(" 指令重排序问题")]),t._v(" "),r("div",{staticClass:"language-python extra-class"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# CPU1            CPU1")]),t._v("\na "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("             b "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\nb "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("           a "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),r("p",[t._v("重排序能够有效的提高处理器的运算效率，但是重排序有时候会让结果发生错误，尤其是在多核环境下，会发生很多奇妙的问题，猜猜下面两个CPU输出的结果")]),t._v(" "),r("div",{staticClass:"language-python extra-class"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# CPU1                      CPU2")]),t._v("\na "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("                      b "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\nb "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("                 a "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string-interpolation"}},[r("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"b = ')]),r("span",{pre:!0,attrs:{class:"token interpolation"}},[r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("b"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string-interpolation"}},[r("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"a = ')]),r("span",{pre:!0,attrs:{class:"token interpolation"}},[r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),r("p",[t._v("如果已多次运行以上程序会发现，在终端中竟然出现了 a = 100, b = 100的结果, 原因是底层处理器”自以为是“的重排序使得我们运行的程序变成如下")]),t._v(" "),r("div",{staticClass:"language-python extra-class"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# CPU1                      CPU2")]),t._v("\na "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("                      b "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string-interpolation"}},[r("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"b = ')]),r("span",{pre:!0,attrs:{class:"token interpolation"}},[r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("b"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string-interpolation"}},[r("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"a = ')]),r("span",{pre:!0,attrs:{class:"token interpolation"}},[r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nb "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("                 a "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n")])])]),r("h3",{attrs:{id:"各种硬件的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#各种硬件的区别"}},[t._v("#")]),t._v(" 各种硬件的区别")]),t._v(" "),r("p",[t._v("为解决多核处理器所带来的问题，不同的设计着提供了不同的方案，但对于程序员，了解这些策略并编写正确的程序具有很大的难度")]),t._v(" "),r("h2",{attrs:{id:"程序员对jmm的期望"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#程序员对jmm的期望"}},[t._v("#")]),t._v(" 程序员对JMM的期望")]),t._v(" "),r("p",[t._v("在生活中我们常常做不了甲方，但对于JAVA的设计者们来说，我们就是甲方，而且我们的要求不多，也并不过分")]),t._v(" "),r("h3",{attrs:{id:"顺序一致性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#顺序一致性"}},[t._v("#")]),t._v(" 顺序一致性")]),t._v(" "),r("p",[t._v("当我们程序员写出了正确的代码的前提下，希望程序按照我们所设想的代码顺序执行，并输出正确的结果")]),t._v(" "),r("p",[t._v("所以在设计的时候，处理器的内存模型和编程语言的内存模型都会以顺序一致性作为参考，接下我们具体的谈谈顺序一致性的具体要求")]),t._v(" "),r("h4",{attrs:{id:"数据读写与顺序一致性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据读写与顺序一致性"}},[t._v("#")]),t._v(" 数据读写与顺序一致性")]),t._v(" "),r("p",[t._v("当我们处理多线程问题的时候，常常会遇到如下数据竞争的问题：")]),t._v(" "),r("ul",[r("li",[t._v("线程1: 读取内存区域的x变量")]),t._v(" "),r("li",[t._v("线程2: 更新内存预取的x变量")]),t._v(" "),r("li",[t._v("以上两个操作如何同步？")])]),t._v(" "),r("p",[t._v("作为程序员我们期望，当我们约定了线程1的操作先于线程2执行(反之亦然)，此时这个程序便成为了一个没有数据竞争的程序，同时我们也可以称之为正确同步的程序，该程序的执行将具有"),r("strong",[t._v("顺序一致性")])]),t._v(" "),r("h4",{attrs:{id:"线程与顺序一致性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线程与顺序一致性"}},[t._v("#")]),t._v(" 线程与顺序一致性")]),t._v(" "),r("p",[t._v("当我们运行了多个线程的时候，顺序一致性向我们保证了：")]),t._v(" "),r("ul",[r("li",[t._v("一个线程的所有操作必须按照程序的顺序来执行(无指令重排序)，所有操作只能看到一个单一的操作执行顺序(将并行转化为串行)")]),t._v(" "),r("li",[t._v("每个操作必须是"),r("strong",[t._v("原子执行")]),t._v("且立刻对所有线程可见。(注：原子执行是指这种操作一旦开始，就一直运行到结束，中间不会有任何线程切换)")])]),t._v(" "),r("p",[r("img",{attrs:{src:s(351),alt:"原子执行"}})]),t._v(" "),r("h4",{attrs:{id:"同步块和顺序一致性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#同步块和顺序一致性"}},[t._v("#")]),t._v(" 同步块和顺序一致性")]),t._v(" "),r("div",{staticClass:"language-java extra-class"},[r("pre",{pre:!0,attrs:{class:"language-java"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SynchronizedExample")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" flag "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("writer")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        a "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        flag "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("reader")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("floag"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n        "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),r("p",[t._v("在上面实例代码中，writer()和reader()方法，分别在线程1和线程二中执行，我们也期望同步块中的执行也满足线程的"),r("strong",[t._v("顺序一致性")]),t._v("。")]),t._v(" "),r("h3",{attrs:{id:"代码的运行效率"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#代码的运行效率"}},[t._v("#")]),t._v(" 代码的运行效率")]),t._v(" "),r("p",[t._v("在满足"),r("strong",[t._v("顺序一致性")]),t._v("的条件下，我们希望代码的执行效率越快越好")]),t._v(" "),r("h3",{attrs:{id:"代码的可读性和易实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#代码的可读性和易实现"}},[t._v("#")]),t._v(" 代码的可读性和易实现")]),t._v(" "),r("p",[t._v("我们希望JAVA的设计者们能够提供安全且易实现的机制，满足顺序一致性以及执行效率，并且让我们的写出来的代码具有良好的可读性。")]),t._v(" "),r("h2",{attrs:{id:"jmm的诞生"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jmm的诞生"}},[t._v("#")]),t._v(" JMM的诞生")]),t._v(" "),r("h3",{attrs:{id:"效率与一致性的博弈"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#效率与一致性的博弈"}},[t._v("#")]),t._v(" 效率与一致性的博弈")]),t._v(" "),r("p",[t._v("从上文我们可以看到，顺序一致性与执行效率是相互矛盾的，所以JAVA的设计者们做了如下决定")]),t._v(" "),r("blockquote",[r("p",[t._v("在满足执行结果与程序员期望结果的前提下，尽可能的减少顺序一直性对内存模型的束缚")])]),t._v(" "),r("p",[t._v("为此，提出了happens-before原则来描述这种设计理念，本文不会针对这个概念做深入的解释，但我们可以这么理解，设计者们为程序员创造了一个程序是按照顺序一致性执行的桃花源，它不会违背程序员所期望的结果，但实际过程却有所不同。")]),t._v(" "),r("h3",{attrs:{id:"语言设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#语言设计"}},[t._v("#")]),t._v(" 语言设计")]),t._v(" "),r("p",[t._v("java设计者们为达到可读性和易实现性，提供了一下关键字和方法")]),t._v(" "),r("ul",[r("li",[t._v("synchronized 关键字")]),t._v(" "),r("li",[t._v("volatile 关键字")]),t._v(" "),r("li",[t._v("final 关键字")]),t._v(" "),r("li",[t._v("锁\n"),r("ul",[r("li",[t._v("concurrent包")])])])]),t._v(" "),r("p",[t._v("JMM就是由这些小部件组成")]),t._v(" "),r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),r("p",[t._v("本文主要介绍了JMM诞生的背景知识，主要介绍了硬件方面的内容，并从程序员的角度分析，JMM应该满足哪些条件，以及它的设计的总体思想")]),t._v(" "),r("h2",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),r("ul",[r("li",[t._v("《Java并发编程的艺术》")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://juejin.im/post/5bf2977751882505d840321d",target:"_blank",rel:"noopener noreferrer"}},[t._v("理解java内存模型"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://juejin.im/book/5afc2e5f6fb9a07a9b362527",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis深度历险:核心原理与应用实践"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);